import { Request, Response } from "express";
import caseCollection from "../models/case.model";
import { getProvinceName, getDistrictName, getSubdistrictName } from '../utils/loadLocationData';


export const createCaseCRM = async (req: Request, res: Response): Promise<void> => {
  try {
    const { recorded_by, recorded_date, data } = req.body;
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!data || !Array.isArray(data) || data.length === 0) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• data ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      return;
    }

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏™
    for (const item of data) {
      const caseId = item.case_id?.trim(); // ‚úÖ ‡πÉ‡∏ä‡πâ string ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (!caseId) {
        res.status(400).json({ message: "Invalid case_id, must be a non-empty string" });
        return;
      }
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ case_id ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingCase = await caseCollection
        .where("case_id", "==", caseId)
        .get();
      if (!existingCase.empty) {
        res.status(400).json({ message: `case_id ${caseId} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß` });
        return;
      }

      // üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
      const patientInfo = item.patient_info || {};
      const provinceId = patientInfo.province_name;
      const districtId = patientInfo.district_name;
      const subdistrictId = patientInfo.subdistrict_name;
      const locationNames = {
        province_name: getProvinceName(provinceId),
        district_name: getDistrictName(districtId),
        subdistrict_name: getSubdistrictName(subdistrictId),
      };

      // üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null)
      await caseCollection.add({
        case_id: caseId,
        recorded_by: recorded_by?.trim() ? recorded_by : null,
        recorded_date: recorded_date || null,
        patient_info: {
          ...patientInfo, // ‚úÖ ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•
          ...locationNames, // ‚úÖ ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•
        },
        appointment_info: item.appointment_info || null,
        case_evaluation: item.case_evaluation || null,
        reporter_info: item.reporter_info || null,
        companions: item.companions || null,
        transport_request: item.transport_request || null,
        createdAt: new Date(),
        updatedAt: new Date(),
      });
    }

    // üéØ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏Ñ‡πà status 200 ‡πÅ‡∏•‡∏∞ message
    res.status(200).json({ message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ message: "Error creating cases", error });
  }
};


// üü¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏™‡πÉ‡∏´‡∏°‡πà
export const createCase = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { case_id } = req.body;

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ case_id ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingCase = await caseCollection
      .where("case_id", "==", case_id)
      .get();

    if (!existingCase.empty) {
      res.status(400).json({ message: "case_id ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
      return;
    }

    // üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
    const newCaseRef = caseCollection.doc();
    await newCaseRef.set({
      ...req.body,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    res.status(201).json({ id: newCaseRef.id, ...req.body });
  } catch (error) {
    res.status(500).json({ message: "Error creating case", error });
  }
};

// üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° status

export const getAllCases = async (req: Request, res: Response) => {
  try {
    const { status } = req.query;
    let query = caseCollection.orderBy("createdAt", "desc");

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° status ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (status && status !== "") {
      query = query.where("case_evaluation.case_status", "==", status);
    }

    const snapshot = await query.get();
    const cases = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));

    res.status(200).json({
      status: "success",
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
      total: cases.length,
      data: cases,
    });
  } catch (error) {
    res.status(500).json({ message: "Error fetching cases", error });
  }
};
// üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™‡∏ï‡∏≤‡∏° case_id

export const getCaseById = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const caseId = Number(req.params.case_id);

    if (isNaN(caseId)) {
      res.status(400).json({ message: "Invalid case_id, must be a number" });
      return;
    }

    const caseSnapshot = await caseCollection
      .where("case_id", "==", caseId)
      .get();

    if (caseSnapshot.empty) {
      res.status(404).json({ message: "Case not found" });
      return;
    }

    const caseData = caseSnapshot.docs[0].data();

    res.status(200).json({
      status: "success",
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: caseData,
    });
  } catch (error) {
    res.status(500).json({ message: "Error fetching case by ID", error });
  }
};
// üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™‡∏ï‡∏≤‡∏° case_id

export const updateCase = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const caseId = Number(req.params.case_id);

    if (isNaN(caseId)) {
      res.status(400).json({ message: "Invalid case_id, must be a number" });
      return;
    }

    const updateData = req.body;
    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Ñ‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const caseSnapshot = await caseCollection
      .where("case_id", "==", caseId)
      .get();

    if (caseSnapshot.empty) {
      res.status(404).json({ message: "Case not found" });
      return;
    }
    const docId = caseSnapshot.docs[0].id;
    const caseRef = caseCollection.doc(docId);
    // üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await caseRef.update({ ...updateData, updatedAt: new Date() });
    res.status(200).json({
      status: "success",
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: updateData,
    });
  } catch (error) {
    res.status(500).json({ message: "Error updating case", error });
  }
};
// üü¢ ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏™‡∏ï‡∏≤‡∏° case_id

export const deleteCase = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const caseId = Number(req.params.case_id);

    if (isNaN(caseId)) {
      res.status(400).json({ message: "Invalid case_id, must be a number" });
      return;
    }
    const caseSnapshot = await caseCollection
      .where("case_id", "==", caseId)
      .get();
    if (caseSnapshot.empty) {
      res.status(404).json({ message: "Case not found" });
      return;
    }
    const docId = caseSnapshot.docs[0].id;
    const caseRef = caseCollection.doc(docId);
    await caseRef.delete();
    res.status(200).json({ message: "Case deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error deleting case", error });
  }
};
// üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CRM

export const getCaseForCRM = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { case_id, ticketId } = req.body;
    if (!case_id?.trim()) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á case_id" });
      return;
    }
    const caseSnapshot = await caseCollection
      .where("case_id", "==", case_id)
      .get();
    if (caseSnapshot.empty) {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ" });
      return;
    }
    const caseData = caseSnapshot.docs[0].data();
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
    const response = {
      case_id: case_id,
      ticketId: ticketId || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      status: caseData?.status || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      transport_request: caseData?.transport_request?.map((request: any) => ({
        departure_schedule: request.departure_schedule || false,
        return_schedule: request.return_schedule || false,
        status: request.status || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        driver: request.driver || {
          name: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          carLicense: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          carType: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          description: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        },
        pickup_location: request.pickup_location || {
          pickup_place: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          province: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          district: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          subdistrict: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          landmark: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          map: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        },
        dropoff_location: request.dropoff_location || {
          dropoff_place: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          province: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          district: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          subdistrict: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          landmark: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          map: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        },
        scheduled_time: request.scheduled_time || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      })) || [],
    };
    res.status(200).json(response);
  } catch (error) {
    res.status(500).json({ message: "Error fetching case for CRM", error });
  }
};

export const updateCaseStatusFromCRM = async (req: Request, res: Response): Promise<void> => {
  try {
    const { case_id, new_status } = req.body;
    if (!case_id?.trim() || !new_status?.trim()) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á case_id ‡πÅ‡∏•‡∏∞ new_status" });
      return;
    }
    const caseSnapshot = await caseCollection.where("case_id", "==", case_id).get();

    if (caseSnapshot.empty) {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ" });
      return;
    }
    const caseDocId = caseSnapshot.docs[0].id;
    await caseCollection.doc(caseDocId).update({ status: new_status, updatedAt: new Date() });
    res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", case_id, new_status });
  } catch (error) {
    res.status(500).json({ message: "Error updating case status", error });
  }
};

