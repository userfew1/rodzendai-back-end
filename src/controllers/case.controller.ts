import { Request, Response } from "express";
import CaseModel from "../models/case.model";
import { log } from "console";



// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™‡πÉ‡∏´‡∏°‡πà
export const createCase = async (req: Request, res: Response) => {
    log(req.body);
    try {
        const newCase = new CaseModel(req.body);
        const savedCase = await newCase.save();
        res.status(201).json(savedCase);
    } catch (error) {
        res.status(500).json({ message: "Error creating case", error });
    }
};

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllCases = async (req: Request, res: Response): Promise<void> => {
    try {
        // ‚úÖ ‡πÉ‡∏ä‡πâ populate() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• FK ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        const cases = await CaseModel.find()
            .populate("userEditID", "username") // üîπ ‡∏î‡∏∂‡∏á `username` ‡∏à‡∏≤‡∏Å User
            .populate({
                path: "carID",
                populate: { path: "transportTypeID", select: "status" } // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TransportType
            })
            .populate({
                path: "patientID",
                populate: [
                    { path: "pickupLocationID", select: "address district province" }, // üîπ ‡∏î‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö
                    { path: "dropoffLocationID", select: "address district province" }, // üîπ ‡∏î‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á
                    { path: "relatives", select: "name relationship phonePrimary" } // üîπ ‡∏î‡∏∂‡∏á‡∏ç‡∏≤‡∏ï‡∏¥
                ]
            });

        res.status(200).json(cases);
    } catch (error) {
        console.error("Error retrieving cases:", error);
        res.status(500).json({ message: "Error retrieving cases", error });
    }
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™
export const updateCase = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const updatedCase = await CaseModel.findByIdAndUpdate(id, req.body, { new: true });

        if (!updatedCase) {
            res.status(404).json({ message: "Case not found" });
            return; // ‡πÉ‡∏™‡πà return ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å TypeScript ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ñ‡∏∑‡∏ô undefined
        }

        res.status(200).json(updatedCase);
    } catch (error) {
        res.status(500).json({ message: "Error updating case", error });
    }
};

// ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™
export const deleteCase = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params; // ‡∏£‡∏±‡∏ö ID ‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå

        const deletedCase = await CaseModel.findByIdAndDelete(id); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏™

        if (!deletedCase) {
            res.status(404).json({ message: "Case not found" });
            return; // ‡πÉ‡∏™‡πà return ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        }

        res.status(200).json({ message: "Case deleted successfully" });
    } catch (error) {
        res.status(500).json({ message: "Error deleting case", error });
    }
};
