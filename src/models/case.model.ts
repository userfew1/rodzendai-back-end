import mongoose, { Schema, Document } from "mongoose";

interface ICase extends Document {
    caseID: string;
    userEditID?: mongoose.Types.ObjectId | null;
    carID: mongoose.Schema.Types.ObjectId;
    patientID: mongoose.Schema.Types.ObjectId;
    status: string;
    description: string;
    createdAt: Date;
    updatedAt: Date;
}

const CaseSchema: Schema = new Schema(
    {
        caseID: { type: mongoose.Schema.Types.ObjectId, required: true, unique: true },
        userEditID: { type: mongoose.Schema.Types.ObjectId, ref: "User", default: null }, // üîπ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö User
        carID: { type: mongoose.Schema.Types.ObjectId, ref: "Car", required: true }, // üîπ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Car
        patientID: { type: mongoose.Schema.Types.ObjectId, ref: "Patient", required: true }, // üîπ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Patient
        status: {
            type: String,
            enum: ["‡∏£‡∏≠‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á", "‡πÑ‡∏î‡πâ", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", ],
            default: "‡∏£‡∏≠‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á",
        },
        description: { type: String, required: true },
    },
    { timestamps: true } // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏° `createdAt` ‡πÅ‡∏•‡∏∞ `updatedAt` ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
);

const CaseModel = mongoose.model<ICase>("Case", CaseSchema);

export default CaseModel;
